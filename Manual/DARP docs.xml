<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DARP</name>
    </assembly>
    <members>
        <member name="T:DARP.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
        </member>
        <member name="M:DARP.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DARP.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:DARP.Models.Cords2D">
            <summary>
            Coordinates structure in 2 dimensional space
            </summary>
        </member>
        <member name="P:DARP.Models.Cords2D.X">
            <summary>
            X coordinate
            </summary>
        </member>
        <member name="P:DARP.Models.Cords2D.Y">
            <summary>
            Y coordinate
            </summary>
        </member>
        <member name="M:DARP.Models.Cords2D.#ctor(System.Double,System.Double)">
            <summary>
            Creates new instance of coordinates type
            </summary>
        </member>
        <member name="M:DARP.Models.Cords2D.ToString">
            <summary>
            Returns user-friendly formated string
            </summary>
        </member>
        <member name="T:DARP.Models.Order">
            <summary>
            Order represents a request for transportation from one place to another.
            </summary>
        </member>
        <member name="P:DARP.Models.Order.Id">
            <summary>
            Unique identifier
            </summary>
        </member>
        <member name="P:DARP.Models.Order.Name">
            <summary>
            Optional description
            </summary>
        </member>
        <member name="P:DARP.Models.Order.State">
            <summary>
            Current state. Can be changed via method SetState(...)
            </summary>
        </member>
        <member name="P:DARP.Models.Order.PickupLocation">
            <summary>
            Pickup location in 2D metric space
            </summary>
        </member>
        <member name="P:DARP.Models.Order.DeliveryLocation">
            <summary>
            Delivery location in 2D metric space
            </summary>
        </member>
        <member name="P:DARP.Models.Order.DeliveryTime">
            <summary>
            Delivery time window determining when order must be delivered to delivery location
            </summary>
        </member>
        <member name="P:DARP.Models.Order.TotalProfit">
            <summary>
            Amount of money recieved if the order is successfuly delivered
            </summary>
        </member>
        <member name="M:DARP.Models.Order.Reject">
            <summary>
            Set State to Rejected
            </summary>
        </member>
        <member name="M:DARP.Models.Order.Handle">
            <summary>
            Set State to Handled
            </summary>
        </member>
        <member name="M:DARP.Models.Order.ToString">
            <summary>
            Returns user-friendly formated string
            </summary>
        </member>
        <member name="T:DARP.Models.OrderState">
            <summary>
            Order state enum
            </summary>
        </member>
        <member name="F:DARP.Models.OrderState.Created">
            <summary>
            New order, has not been scheduled yet
            </summary>
        </member>
        <member name="F:DARP.Models.OrderState.Accepted">
            <summary>
            Allready scheduled order, has not been handled yet
            </summary>
        </member>
        <member name="F:DARP.Models.OrderState.Rejected">
            <summary>
            Rejected order
            </summary>
        </member>
        <member name="F:DARP.Models.OrderState.Handled">
            <summary>
            Handled order
            </summary>
        </member>
        <member name="T:DARP.Models.Plan">
            <summary>
            Plan is a collection of routes for fixed set of vehicles. For each vehicle there exists exactly one route.
            </summary>
        </member>
        <member name="P:DARP.Models.Plan.Routes">
            <summary>
            Collection of routes
            </summary>
        </member>
        <member name="P:DARP.Models.Plan.Orders">
            <summary>
            Collection of order that are scheduled on routes. Iterates over Routes and yields orders.
            </summary>
        </member>
        <member name="M:DARP.Models.Plan.GetTotalProfit(DARP.Utils.MetricFunc,System.Double)">
            <summary>
            Returns sum of total profits of all routes
            </summary>
            <param name="metric">Metric</param>
            <param name="vehicleChargePerTick">Vehicle's charge per tick</param>
        </member>
        <member name="M:DARP.Models.Plan.UpdateVehiclesLocation(DARP.Models.Time,DARP.Utils.MetricFunc,System.Double)">
            <summary>
            Update vehicles location for each route
            </summary>
            <param name="time">Current time</param>
            <param name="metric">Metric</param>
            <param name="vehicleChargePerTick">Vehicle's charge per tick</param>
        </member>
        <member name="M:DARP.Models.Plan.Contains(DARP.Models.Order)">
            <summary>
            Check whether the plan contains an order
            </summary>
            <param name="order">The order</param>
        </member>
        <member name="M:DARP.Models.Plan.Clone">
            <summary>
            Clone the plane and all its routes
            </summary>
        </member>
        <member name="T:DARP.Models.Route">
            <summary>
            Route is collection of RoutePoints for one vehicle. There exists three types of point, pickups, deliveries and vehicle location.
            </summary>
        </member>
        <member name="P:DARP.Models.Route.Vehicle">
            <summary>
            The vehicle
            </summary>
        </member>
        <member name="P:DARP.Models.Route.Points">
            <summary>
            Collection of points
            </summary>
        </member>
        <member name="P:DARP.Models.Route.Orders">
            <summary>
            Collection of order that are scheduled on the route. Iterates over Points and yields orders.
            </summary>
        </member>
        <member name="M:DARP.Models.Route.#ctor(DARP.Models.Vehicle,DARP.Models.Time)">
            <summary>
            Initialize new route for the vehicle in the time
            </summary>
            <param name="vehicle"></param>
            <param name="time"></param>
        </member>
        <member name="M:DARP.Models.Route.GetTotalProfit(DARP.Utils.MetricFunc,System.Double)">
            <summary>
            Returns the sum of all delivered orders profit and subtracts vehicle charges
            </summary>
            <param name="metric">Metric</param>
            <param name="vehicleChargePerTick">Vehicle's charge per tick</param>
        </member>
        <member name="M:DARP.Models.Route.Contains(DARP.Models.Order)">
            <summary>
            Check whether the route contains an order
            </summary>
            <param name="order">The order</param>
        </member>
        <member name="M:DARP.Models.Route.CanInsertOrder(DARP.Models.Order,System.Int32,DARP.Utils.MetricFunc)">
            <summary>
            Check whether an order can be inserted into the route at specific index
            </summary>
            <param name="newOrder">The order</param>
            <param name="index">The index</param>
            <param name="metric">Metric</param>
        </member>
        <member name="M:DARP.Models.Route.InsertOrder(DARP.Models.Order,System.Int32,DARP.Utils.MetricFunc)">
            <summary>
            Inserts an order into the route at specific inde
            </summary>
            <param name="newOrder">The order</param>
            <param name="index">The index</param>
            <param name="metric">Metric</param>
        </member>
        <member name="M:DARP.Models.Route.RemoveOrder(DARP.Models.Order)">
            <summary>
            Removes an order from route
            </summary>
            <param name="order">The order</param>
        </member>
        <member name="M:DARP.Models.Route.UpdateVehiclesLocation(DARP.Models.Time,DARP.Utils.MetricFunc,System.Double)">
            <summary>
            Updates vehicle location with respect to a time. All point that were passed before the time are thrown away.
            </summary>
            <param name="time">The time</param>
            <param name="metric">Metric</param>
            <param name="vehicleChargePerTick">Vehicle charge per tick</param>
            <returns>Gained profit and removed orders that were handled</returns>
        </member>
        <member name="M:DARP.Models.Route.Clone">
            <summary>
            Clone the route
            </summary>
        </member>
        <member name="M:DARP.Models.Route.ToString">
            <summary>
            Returns user-friendly formated string
            </summary>
        </member>
        <member name="T:DARP.Models.RoutePoint">
            <summary>
            Point at a route
            </summary>
        </member>
        <member name="P:DARP.Models.RoutePoint.Time">
            <summary>
            Time of arrival
            </summary>
        </member>
        <member name="P:DARP.Models.RoutePoint.Location">
            <summary>
            Location in metric space
            </summary>
        </member>
        <member name="M:DARP.Models.RoutePoint.Clone">
            <summary>
            Clone the point
            </summary>
            <returns></returns>
        </member>
        <member name="T:DARP.Models.VehicleRoutePoint">
            <summary>
            Vehicle location point, always the first point on a route and the route contains exactly the one
            </summary>
        </member>
        <member name="P:DARP.Models.VehicleRoutePoint.Vehicle">
            <summary>
            The vehicle
            </summary>
        </member>
        <member name="P:DARP.Models.VehicleRoutePoint.Location">
            <summary>
            Vehicle's location
            </summary>
        </member>
        <member name="M:DARP.Models.VehicleRoutePoint.#ctor(DARP.Models.Vehicle)">
            <summary>
            Initialize the VehicleRoutePoint
            </summary>
            <param name="vehicle">A vehicle</param>
        </member>
        <member name="M:DARP.Models.VehicleRoutePoint.Clone">
            <summary>
            Clone the VehicleRoutePoint
            </summary>
        </member>
        <member name="T:DARP.Models.OrderPickupRoutePoint">
            <summary>
            Order pickup route point. It is always followed by delivery point.
            </summary>
        </member>
        <member name="P:DARP.Models.OrderPickupRoutePoint.Order">
            <summary>
            The order to be picked up
            </summary>
        </member>
        <member name="P:DARP.Models.OrderPickupRoutePoint.Location">
            <summary>
            Pickup location
            </summary>
        </member>
        <member name="M:DARP.Models.OrderPickupRoutePoint.#ctor(DARP.Models.Order)">
            <summary>
            Initialize the OrderPickupRoutePoint
            </summary>
            <param name="order">An order</param>
        </member>
        <member name="M:DARP.Models.OrderPickupRoutePoint.Clone">
            <summary>
            Clone the OrderPickupRoutePoint
            </summary>
        </member>
        <member name="T:DARP.Models.OrderDeliveryRoutePoint">
            <summary>
            Order delivery route point.
            </summary>
        </member>
        <member name="P:DARP.Models.OrderDeliveryRoutePoint.Order">
            <summary>
            The order to be picked up
            </summary>
        </member>
        <member name="P:DARP.Models.OrderDeliveryRoutePoint.Location">
            <summary>
            Delivery location
            </summary>
        </member>
        <member name="P:DARP.Models.OrderDeliveryRoutePoint.Time">
            <summary>
            Delivery time. Setter checks whether delivery time is in the order's time window.
            </summary>
        </member>
        <member name="M:DARP.Models.OrderDeliveryRoutePoint.#ctor(DARP.Models.Order)">
            <summary>
            Initialize the OrderDeliveryRoutePoint
            </summary>
            <param name="order">An order</param>
        </member>
        <member name="M:DARP.Models.OrderDeliveryRoutePoint.Clone">
            <summary>
            Clone the OrderDeliveryRoutePoint
            </summary>
        </member>
        <member name="T:DARP.Models.Time">
            <summary>
            Time structure using Ticks as default units.
            </summary>
        </member>
        <member name="F:DARP.Models.Time.Zero">
            <summary>
            Zero time
            </summary>
        </member>
        <member name="P:DARP.Models.Time.Ticks">
            <summary>
            Ticks
            </summary>
        </member>
        <member name="M:DARP.Models.Time.#ctor(System.Int64)">
            <summary>
            Initialize the time structure
            </summary>
            <param name="ticks">Ticks</param>
        </member>
        <member name="M:DARP.Models.Time.#ctor(System.Double)">
            <summary>
            Initialize the time structure
            </summary>
            <param name="ticks">Ticks</param>
        </member>
        <member name="M:DARP.Models.Time.ToDouble">
            <summary>
            Returns Ticks as double
            </summary>
        </member>
        <member name="M:DARP.Models.Time.CompareTo(DARP.Models.Time)">
            <summary>
            Implementation for IComparable
            </summary>
        </member>
        <member name="M:DARP.Models.Time.Equals(System.Object)">
            <summary>
            Implementation for IComparable
            </summary>
        </member>
        <member name="M:DARP.Models.Time.ToString">
            <summary>
            Returns user-friendly formated string 
            </summary>
        </member>
        <member name="M:DARP.Models.Time.GetHashCode">
            <summary>
            Returns Ticks
            </summary>
        </member>
        <member name="M:DARP.Models.Time.AddTicks(System.Int32)">
            <summary>
            Reutnrs new istance of Time with Ticks increased
            </summary>
        </member>
        <member name="T:DARP.Models.TimeWindow">
            <summary>
            Time window structure
            </summary>
        </member>
        <member name="P:DARP.Models.TimeWindow.From">
            <summary>
            Time from
            </summary>
        </member>
        <member name="P:DARP.Models.TimeWindow.To">
            <summary>
            Time to
            </summary>
        </member>
        <member name="M:DARP.Models.TimeWindow.#ctor(DARP.Models.Time,DARP.Models.Time)">
            <summary>
            Initialize TimeWindow
            </summary>
        </member>
        <member name="M:DARP.Models.TimeWindow.ToString">
            <summary>
            Returns user-friendly formated string 
            </summary>
        </member>
        <member name="T:DARP.Models.Vehicle">
            <summary>
            Vehicle delivers orders between pickups and deliveries points
            </summary>
        </member>
        <member name="P:DARP.Models.Vehicle.Id">
            <summary>
            Unique identifier
            </summary>
        </member>
        <member name="P:DARP.Models.Vehicle.Name">
            <summary>
            Optional description
            </summary>
        </member>
        <member name="P:DARP.Models.Vehicle.Location">
            <summary>
            Current location
            </summary>
        </member>
        <member name="M:DARP.Models.Vehicle.ToString">
            <summary>
            Returns user-friendly formated string 
            </summary>
        </member>
        <member name="M:DARP.Models.Vehicle.Clone">
            <summary>
            Clone the vehicle
            </summary>
        </member>
        <member name="T:DARP.Solvers.AntColonySolverOutput">
            <summary>
            Ant colony solver output
            </summary>
        </member>
        <member name="P:DARP.Solvers.AntColonySolverOutput.Plan">
            <summary>
            Plan
            </summary>
        </member>
        <member name="P:DARP.Solvers.AntColonySolverOutput.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="M:DARP.Solvers.AntColonySolverOutput.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:DARP.Solvers.AntColonySolverOutput.#ctor(DARP.Models.Plan,DARP.Utils.Status)">
            <summary>
            Initialize
            </summary>
            <param name="plan">Plan</param>
            <param name="status">Status</param>
        </member>
        <member name="T:DARP.Solvers.AntColonySolverInput">
            <summary>
            Ant colony solver output
            </summary>
        </member>
        <member name="M:DARP.Solvers.AntColonySolverInput.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:DARP.Solvers.AntColonySolverInput.#ctor(DARP.Solvers.SolverInputBase)">
            <summary>
            Initialize AntColonySolverInput base on SolverInputBase instance
            </summary>
            <param name="solverInputBase">Instance</param>
        </member>
        <member name="T:DARP.Solvers.AntColonySolver">
            <summary>
            Ant colony solver
            </summary>
        </member>
        <member name="M:DARP.Solvers.AntColonySolver.Run(DARP.Solvers.ISolverInput)">
            <summary>
            Run ant colony solver
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:DARP.Solvers.AntColonySolver.Run(DARP.Solvers.AntColonySolverInput)">
            <summary>
            Run ant colony solver
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="T:DARP.Solvers.FitnessLogFunc">
            <summary>
            Function for logging evolution fitness in real-time
            </summary>
            <param name="generation">Number of generation</param>
            <param name="fitness">Fitness value</param>
        </member>
        <member name="T:DARP.Solvers.EvolutionarySolverOutput">
            <summary>
            Evolutionary solver output
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverOutput.Plan">
            <summary>
            Plan
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverOutput.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="M:DARP.Solvers.EvolutionarySolverOutput.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:DARP.Solvers.EvolutionarySolverOutput.#ctor(DARP.Models.Plan,DARP.Utils.Status)">
            <summary>
            Initialize
            </summary>
            <param name="plan">Plan</param>
            <param name="status">Status</param>
        </member>
        <member name="T:DARP.Solvers.EvolutionarySolverInput">
            <summary>
             Evolutionary solver input
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.RandomInstance">
            <summary>
            Instance of random generator. If null, new instance is created.
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.Generations">
            <summary>
            Number of generations
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.PopulationSize">
            <summary>
            Population size
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.RandomOrderRemoveMutProb">
            <summary>
            Probability of removing order in insertion mutations
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.RandomOrderInsertMutProb">
            <summary>
            Probability of trying to randomly insert order into random route
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.BestfitOrderInsertMutProb">
            <summary>
            Probability of inserting order into random route in best possible place
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.PlanCrossoverProb">
            <summary>
            Probability of crossing over two plans
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.RouteCrossoverProb">
            <summary>
            Probability of crossing over two routes in the same plan
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.FitnessLog">
            <summary>
            Function for logging fitness
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.AdaptiveMutation">
            <summary>
            Use adaptive mutation. Decreases mutations probability over generations.
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.EnviromentalSelection">
            <summary>
            Enviromental selection
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.ParentalSelection">
            <summary>
            Parental selection
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolverInput.CrossoverInsertionHeuristic">
            <summary>
            Heuristic that is used after crossover to insert remained orders
            </summary>
        </member>
        <member name="M:DARP.Solvers.EvolutionarySolverInput.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:DARP.Solvers.EvolutionarySolverInput.#ctor(DARP.Solvers.SolverInputBase)">
            <summary>
            Initialize EvolutionarySolverInput base on SolverInputBase instance
            </summary>
            <param name="solverInputBase">Instance</param>
        </member>
        <member name="T:DARP.Solvers.EvolutionarySolver">
            <summary>
            Evolutionary solver
            </summary>
        </member>
        <member name="M:DARP.Solvers.EvolutionarySolver.DARP#Solvers#ISolver#Run(DARP.Solvers.ISolverInput)">
            <summary>
            Run evolutionary solver
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:DARP.Solvers.EvolutionarySolver.Run(DARP.Solvers.EvolutionarySolverInput)">
            <summary>
            Run evolutionary solver
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="T:DARP.Solvers.EvolutionarySolver.Individual">
            <summary>
            Individual representation
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolver.Individual.Plan">
            <summary>
            Plan
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolver.Individual.RemaningOrders">
            <summary>
            Orders that are not in the plan
            </summary>
        </member>
        <member name="P:DARP.Solvers.EvolutionarySolver.Individual.Fitness">
            <summary>
            Fitness. Recomputed each generation.
            </summary>
        </member>
        <member name="M:DARP.Solvers.EvolutionarySolver.Individual.Clone">
            <summary>
            Clone individual
            </summary>
            <returns></returns>
        </member>
        <member name="T:DARP.Solvers.InsertionHeuristicFunc">
            <summary>
            Insertion heurstic function
            </summary>
            <param name="input">Input</param>
            <returns></returns>
        </member>
        <member name="T:DARP.Solvers.InsertionHeuristicsOutput">
            <summary>
            Insertion heuristics solver output
            </summary>
        </member>
        <member name="P:DARP.Solvers.InsertionHeuristicsOutput.Plan">
            <summary>
            Plan
            </summary>
        </member>
        <member name="P:DARP.Solvers.InsertionHeuristicsOutput.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:DARP.Solvers.InsertionHeuristicsOutput.RemainingOrders">
            <summary>
            Not inserted orders
            </summary>
        </member>
        <member name="M:DARP.Solvers.InsertionHeuristicsOutput.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:DARP.Solvers.InsertionHeuristicsOutput.#ctor(DARP.Models.Plan,DARP.Utils.Status,System.Collections.Generic.List{DARP.Models.Order})">
            <summary>
            Initialize
            </summary>
            <param name="plan">Plan</param>
            <param name="status">Status</param>
            <param name="remainingOrders">Remaining orders</param>
        </member>
        <member name="T:DARP.Solvers.InsertionHeuristicsInput">
            <summary>
            Insertion heurstics input
            </summary>
        </member>
        <member name="P:DARP.Solvers.InsertionHeuristicsInput.Mode">
            <summary>
            Insertion mode
            </summary>
        </member>
        <member name="P:DARP.Solvers.InsertionHeuristicsInput.Epsilon">
            <summary>
            Probability of inserting order to random place in randomized mode
            </summary>
        </member>
        <member name="P:DARP.Solvers.InsertionHeuristicsInput.Runs">
            <summary>
            Total runs in randomized mode, the best one is returned
            </summary>
        </member>
        <member name="M:DARP.Solvers.InsertionHeuristicsInput.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:DARP.Solvers.InsertionHeuristicsInput.#ctor(DARP.Solvers.SolverInputBase)">
            <summary>
            Initialize InsertionHeuristicsInput base on SolverInputBase instance
            </summary>
            <param name="solverInputBase">Instance</param>
        </member>
        <member name="T:DARP.Solvers.InsertionHeuristics">
            <summary>
            Insertion heurstics solver
            </summary>
        </member>
        <member name="M:DARP.Solvers.InsertionHeuristics.DARP#Solvers#ISolver#Run(DARP.Solvers.ISolverInput)">
            <summary>
            Run insertion heurstics
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:DARP.Solvers.InsertionHeuristics.Run(DARP.Solvers.InsertionHeuristicsInput)">
            <summary>
            Run insertion heurstics
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:DARP.Solvers.InsertionHeuristics.RunFirstFit(DARP.Solvers.InsertionHeuristicsInput)">
            <summary>
            Run first fit insertion heurstics. It inserts every order to first possible place.
            </summary>
            <param name="input">Input</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DARP.Solvers.InsertionHeuristics.RunLocalBestFit(DARP.Solvers.InsertionHeuristicsInput)" -->
        <!-- Badly formed XML comment ignored for member "M:DARP.Solvers.InsertionHeuristics.RunGlobalBestFit(DARP.Solvers.InsertionHeuristicsInput)" -->
        <!-- Badly formed XML comment ignored for member "M:DARP.Solvers.InsertionHeuristics.RunRandomizedGlobalBestFit(DARP.Solvers.InsertionHeuristicsInput)" -->
        <member name="T:DARP.Solvers.ISolverInput">
            <summary>
            Solver input
            </summary>
        </member>
        <member name="P:DARP.Solvers.ISolverInput.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="P:DARP.Solvers.ISolverInput.Plan">
            <summary>
            Plan
            </summary>
        </member>
        <member name="P:DARP.Solvers.ISolverInput.Vehicles">
            <summary>
            Collection of vehicles
            </summary>
        </member>
        <member name="P:DARP.Solvers.ISolverInput.Orders">
            <summary>
            Collection of orders
            </summary>
        </member>
        <member name="P:DARP.Solvers.ISolverInput.Metric">
            <summary>
            Metric
            </summary>
        </member>
        <member name="P:DARP.Solvers.ISolverInput.VehicleChargePerTick">
            <summary>
            Vehicle charge per tick
            </summary>
        </member>
        <member name="T:DARP.Solvers.SolverInputBase">
            <summary>
            Default basic implementation of ISolverInput
            </summary>
        </member>
        <member name="M:DARP.Solvers.SolverInputBase.#ctor(DARP.Solvers.SolverInputBase)">
            <summary>
            Initialize SolverInputBase based on another instance
            </summary>
            <param name="solverInputBase">Instance</param>
        </member>
        <member name="T:DARP.Solvers.ISolverOutput">
            <summary>
            Solver output
            </summary>
        </member>
        <member name="P:DARP.Solvers.ISolverOutput.Plan">
            <summary>
            Plan
            </summary>
        </member>
        <member name="P:DARP.Solvers.ISolverOutput.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:DARP.Solvers.ISolver">
            <summary>
            Solver
            </summary>
        </member>
        <member name="M:DARP.Solvers.ISolver.Run(DARP.Solvers.ISolverInput)">
            <summary>
            Run solver
            </summary>
            <param name="input">Input</param>
            <returns></returns>
        </member>
        <member name="T:DARP.Solvers.MIPSolverOutput">
            <summary>
            Mixed integer programming solver output
            </summary>
        </member>
        <member name="P:DARP.Solvers.MIPSolverOutput.Plan">
            <summary>
            Plan
            </summary>
        </member>
        <member name="P:DARP.Solvers.MIPSolverOutput.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:DARP.Solvers.MIPSolverOutput.ObjetiveValue">
            <summary>
            Objective value
            </summary>
        </member>
        <member name="P:DARP.Solvers.MIPSolverOutput.SolverStatus">
            <summary>
            Solver status
            </summary>
        </member>
        <member name="M:DARP.Solvers.MIPSolverOutput.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:DARP.Solvers.MIPSolverOutput.#ctor(DARP.Models.Plan,DARP.Utils.Status,System.Double)">
            <summary>
            Initialize
            </summary>
            <param name="plan">Plan</param>
            <param name="status">Status</param>
            <param name="objectiveValue"></param>
        </member>
        <member name="T:DARP.Solvers.MIPSolverInput">
            <summary>
            Mixed integer programming solver input
            </summary>
        </member>
        <member name="P:DARP.Solvers.MIPSolverInput.Multithreading">
            <summary>
            Enable multithreading
            </summary>
        </member>
        <member name="P:DARP.Solvers.MIPSolverInput.TimeLimit">
            <summary>
            Time limit in miliseconds
            </summary>
        </member>
        <member name="P:DARP.Solvers.MIPSolverInput.Solver">
            <summary>
            Internal solver. SCIP or CP-SAT are available
            </summary>
        </member>
        <member name="P:DARP.Solvers.MIPSolverInput.Integer">
            <summary>
            Require integeral solution. Default is true.
            </summary>
        </member>
        <member name="P:DARP.Solvers.MIPSolverInput.Objective">
            <summary>
            Objective function
            </summary>
        </member>
        <member name="M:DARP.Solvers.MIPSolverInput.#ctor">
            <summary>
            Initialize 
            </summary>
        </member>
        <member name="M:DARP.Solvers.MIPSolverInput.#ctor(DARP.Solvers.SolverInputBase)">
            <summary>
            Initialize EvolutionarySolverInput base on SolverInputBase instance
            </summary>
            <param name="solverInputBase">Instance</param>
        </member>
        <member name="T:DARP.Solvers.MIPSolver">
            <summary>
            Mixed integer programming solver
            </summary>
        </member>
        <member name="M:DARP.Solvers.MIPSolver.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:DARP.Solvers.MIPSolver.DARP#Solvers#ISolver#Run(DARP.Solvers.ISolverInput)">
            <summary>
            Run mixed integer programming solver
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DARP.Solvers.MIPSolver.Run(DARP.Solvers.MIPSolverInput)">
            <summary>
            Run mixed integer programming solver
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="F:DARP.Utils.InsertionHeuristicsMode.FirstFit">
            <summary>
            Gets orders in order and inserts them to first possible place
            </summary>
        </member>
        <member name="F:DARP.Utils.InsertionHeuristicsMode.LocalBestFit">
            <summary>
            Gets orders in order and inserts them to best possible place
            </summary>
        </member>
        <member name="F:DARP.Utils.InsertionHeuristicsMode.GlobalBestFit">
            <summary>
            Finds best fitting order and inserts it until there are none
            </summary>
        </member>
        <member name="F:DARP.Utils.InsertionHeuristicsMode.RandomizedGlobalBestFit">
            <summary>
            Finds best fitting order and inserts it until there are none
            </summary>
        </member>
        <member name="F:DARP.Utils.OptimizationObjective.MinimizeDeliveryTime">
            <summary>
            Not supported yet
            </summary>
        </member>
        <member name="F:DARP.Utils.OptimizationObjective.MinimizeTime">
            <summary>
            Minimizes distance traveled by vehicles. All orders must be handled for optimality.
            </summary>
        </member>
        <member name="F:DARP.Utils.OptimizationObjective.MaximizeProfit">
            <summary>
            Maximizes profit. Not all orders must be handled for optimality.
            </summary>
        </member>
        <member name="T:DARP.Utils.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="F:DARP.Utils.Status.Success">
            <summary>
            Success status
            </summary>
        </member>
        <member name="F:DARP.Utils.Status.Failed">
            <summary>
            Fail status
            </summary>
        </member>
        <member name="P:DARP.Utils.Status.Code">
            <summary>
            Status code
            </summary>
        </member>
        <member name="P:DARP.Utils.Status.Message">
            <summary>
            Status message
            </summary>
        </member>
        <member name="M:DARP.Utils.Status.#ctor(DARP.Utils.StatusCode,System.String)">
            <summary>
            Initialize new status
            </summary>
            <param name="code">Code</param>
            <param name="message">Message</param>
        </member>
        <member name="T:DARP.Windows.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
        </member>
        <member name="M:DARP.Windows.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DARP.Windows.TextBoxWindow">
            <summary>
            Interaction logic for TextBoxWindow.xaml
            </summary>
        </member>
        <member name="M:DARP.Windows.TextBoxWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
